name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v1.1.0, etc.

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for changelog
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Verify version consistency
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=$(python -c "from maskingengine import __version__; print(__version__)")
        
        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        
        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "‚ùå Version mismatch! Tag: $TAG_VERSION, Package: $PACKAGE_VERSION"
          exit 1
        fi
        echo "‚úÖ Version consistency verified"
    
    - name: Run quick tests
      run: |
        pytest tests/test_basic_functionality.py -v
        python -c "
        from maskingengine import Sanitizer
        sanitizer = Sanitizer()
        result = sanitizer.sanitize('test@example.com')
        assert '<<EMAIL_' in result[0]
        print('‚úÖ Basic functionality verified')
        "
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          echo "Generating changelog from $PREV_TAG to ${GITHUB_REF#refs/tags/}"
          CHANGELOG=$(git log --pretty=format:"- %s" $PREV_TAG..HEAD | head -20)
        else
          echo "No previous tag found, generating changelog from start"
          CHANGELOG=$(git log --pretty=format:"- %s" | head -10)
        fi
        
        # Set output for GitHub release
        {
          echo "changelog<<EOF"
          echo "$CHANGELOG"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: "Release ${{ github.ref_name }}"
        body: |
          # MaskingEngine ${{ github.ref_name }}
          
          ## üöÄ What's New
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## üì¶ Installation
          
          ```bash
          pip install maskingengine==${{ github.ref_name }}
          ```
          
          ## üîó Links
          
          - **PyPI Package**: https://pypi.org/project/maskingengine/${{ github.ref_name }}/
          - **Documentation**: https://github.com/foofork/maskingengine/blob/main/docs/README.md
          - **Full Changelog**: https://github.com/foofork/maskingengine/compare/${{ steps.changelog.outputs.prev_tag }}...${{ github.ref_name }}
          
          ## ‚úÖ Release Verification
          
          This release has been automatically tested and verified for:
          - ‚úÖ Package functionality
          - ‚úÖ CLI availability  
          - ‚úÖ Basic PII detection
          - ‚úÖ Configuration profiles
        draft: false
        prerelease: false

  trigger-publish:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      actions: write
    
    steps:
    - name: Trigger PyPI publishing workflow
      run: |
        echo "‚úÖ Release created successfully"
        echo "üöÄ PyPI publishing will be triggered automatically by the release event"
        echo "üì¶ Check the 'Publish to PyPI' workflow for publishing status"