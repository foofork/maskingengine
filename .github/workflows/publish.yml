name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]
    
    - name: Run code quality checks
      run: |
        black --check .
        flake8 .
        mypy maskingengine/
    
    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=maskingengine
    
    - name: Test package functionality
      run: |
        python -c "
        from maskingengine import Sanitizer, Config
        print('✅ Package imports successfully')
        
        # Test basic functionality
        sanitizer = Sanitizer()
        masked, mask_map = sanitizer.sanitize('Email: test@example.com')
        assert '<<EMAIL_' in masked
        print('✅ Basic masking works')
        
        # Test profile functionality  
        sanitizer = Sanitizer(profile='minimal')
        result = sanitizer.sanitize('Contact john@company.com')
        assert '<<EMAIL_' in result[0]
        print('✅ Profile functionality works')
        
        # Test CLI availability
        import subprocess
        result = subprocess.run(['maskingengine', '--version'], capture_output=True, text=True)
        assert result.returncode == 0
        print('✅ CLI is functional')
        "

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Verify build artifacts
      run: |
        ls -la dist/
        twine check dist/*
        echo "✅ Package artifacts verified"
    
    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "
        from maskingengine import Sanitizer
        sanitizer = Sanitizer()
        result = sanitizer.sanitize('test@example.com')
        assert '<<EMAIL_' in result[0]
        print('✅ Wheel installation test passed')
        "
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  publish:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: 
      name: pypi
      url: https://pypi.org/p/maskingengine
    permissions:
      id-token: write  # For trusted publishing
      contents: read
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Verify artifacts before publishing
      run: |
        ls -la dist/
        echo "Publishing the following artifacts:"
        for file in dist/*; do
          echo "- $(basename $file)"
        done
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Use API token for now - can switch to trusted publishing later
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
        print-hash: true

  publish-test:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: testpypi
      url: https://test.pypi.org/p/maskingengine
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Verify artifacts before test publishing
      run: |
        ls -la dist/
        echo "Test publishing the following artifacts:"
        for file in dist/*; do
          echo "- $(basename $file)"
        done
    
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true
        print-hash: true
    
    - name: Test installation from TestPyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ maskingengine
        python -c "
        from maskingengine import Sanitizer
        sanitizer = Sanitizer()
        result = sanitizer.sanitize('test@example.com')
        assert '<<EMAIL_' in result[0]
        print('✅ TestPyPI installation test passed')
        "