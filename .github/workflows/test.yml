name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run linting
      run: |
        flake8 maskingengine --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 maskingengine --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests
      run: |
        pytest tests/ -v --cov=maskingengine --cov-report=xml

    - name: Test package import and basic functionality
      run: |
        python -c "
        from maskingengine import Sanitizer, Config
        sanitizer = Sanitizer()
        masked, mask_map = sanitizer.sanitize('test@example.com', regex_only=True)
        assert '<<EMAIL_' in masked
        print('âœ… Basic functionality test passed')
        "

    - name: Test CLI
      run: |
        echo "test@example.com" | maskingengine mask --stdin --regex-only

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella