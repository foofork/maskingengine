name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        python-version: ["3.8", "3.11"]
        include:
          # Test Windows on one Python version
          - os: windows-latest
            python-version: "3.11"
          # Test macOS on one Python version  
          - os: macos-latest
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev]

    - name: Run code quality checks
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        black --check .
        flake8 .
        mypy maskingengine/

    - name: Run full test suite
      run: |
        pytest tests/ -v --cov=maskingengine --cov-report=xml

    - name: Test package functionality
      run: |
        python -c "
        from maskingengine import Sanitizer, Config
        print('[PASS] Package imports successfully')
        
        # Test basic functionality
        sanitizer = Sanitizer()
        masked, mask_map = sanitizer.sanitize('Email: test@example.com')
        assert '<<EMAIL_' in masked
        print('[PASS] Basic masking works')
        
        # Test profile functionality  
        from maskingengine.core import ConfigResolver
        resolver = ConfigResolver()
        result = resolver.resolve_and_validate(profile='minimal')
        if result['status'] == 'valid':
            config_dict = result['resolved_config'].copy()
            if 'regex_packs' in config_dict:
                config_dict['pattern_packs'] = config_dict.pop('regex_packs')
            config = Config(**{k: v for k, v in config_dict.items() if k in ['pattern_packs', 'regex_only', 'whitelist', 'strict_validation', 'min_confidence']})
            sanitizer = Sanitizer(config)
            masked, mask_map = sanitizer.sanitize('Contact john@company.com')
            assert '<<EMAIL_' in masked
            print('[PASS] Profile functionality works')
        else:
            print('[SKIP] Profile test - minimal profile not available')
        
        # Test configuration system
        config = Config(regex_only=True, pattern_packs=['default'])
        sanitizer = Sanitizer(config)
        result = sanitizer.sanitize('SSN: 123-45-6789')
        assert '<<US_SSN_' in result[0]
        print('[PASS] Configuration system works')
        "

    - name: Test CLI functionality
      run: |
        # Test basic CLI
        echo "test@example.com" | maskingengine mask --stdin --regex-only
        
        # Test CLI with profiles
        maskingengine test-sample "Email: john@example.com" --profile minimal
        
        # Test CLI commands
        maskingengine list-profiles
        maskingengine list-packs
        maskingengine --version

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        token: ${{ secrets.CODECOV_TOKEN }}